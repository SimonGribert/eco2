generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                     Int                      @id @default(autoincrement())
  name                   String
  email                  String                   @unique
  image                  String
  emailVerified          DateTime?
  accounts               Account[]
  sessions               Session[]
  authenticator          Authenticator[]
  bankAccounts           BankAccount[]
  unprocessedTransaction UnprocessedTransaction[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now()) @updatedAt
}

model Account {
  userId            Int // Probably should use string
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([sessionToken])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model BankAccount {
  id                      String                   @id @unique
  name                    String
  type                    BankAccountType
  userId                  Int
  availableBalance        Decimal                  @db.Decimal(65, 2)
  availableCurrency       String
  bookedBalance           Decimal                  @db.Decimal(65, 2)
  bookedCurrency          String
  refreshedAt             DateTime
  bankAccountHistories    BankAccountHistory[]
  unprocessedTransactions UnprocessedTransaction[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankAccountHistory {
  id                String
  refreshedAt       DateTime
  availableBalance  Decimal  @db.Decimal(65, 2)
  availableCurrency String
  bookedBalance     Decimal  @db.Decimal(65, 2)
  bookedCurrency    String

  bankAccount BankAccount @relation(fields: [id], references: [id], onDelete: Cascade)

  @@id([id, refreshedAt])
}

enum BankAccountType {
  UNDEFINED
  SAVINGS
  CHECKING
  CREDIT_CARD
}

model UnprocessedTransaction {
  id                  String            @id @unique
  bankAccountId       String?
  userId              Int
  amount              Decimal           @db.Decimal(65, 2)
  currency            String
  descriptionOriginal String
  descriptionDisplay  String
  status              TransactionStatus
  type                TransactionType
  bookedDate          DateTime
  transactionDate     DateTime
  valueDate           DateTime
  createdAt           DateTime          @default(now())

  bankAccount BankAccount? @relation(fields: [bankAccountId], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TransactionStatus {
  UNDEFINED
  PENDING
  BOOKED
}

enum TransactionType {
  UNDEFINED
  CREDIT_CARD
  PAYMENT
  WITHDRAWAL
  DEFAULT
  TRANSFER
}
